                    Library Functions Manual -  _printf

NAME
       _printf - formatted output conversion

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
 #include <stdio.h>
    int _printf(const char *format, ...);

DESCRIPTION
    The functions in the printf() family produce output according to a
    format as described below.

    Format of the format string :
    The format string is a character string, beginning and ending in
    its initial shift state, if any. The format string is a character string composed of zero or
    more directives: ordinary characters (not %), which are
    copied unchanged to the output stream; and conversion
    specifications, each of which results in fetching zero or more
    subsequent arguments.  Each conversion specification is introduced
    by the character %, and ends with a conversion specifier.

CONVERSION SPECIFIERS
     A character that specifies the type of conversion to be applied.
       The conversion specifiers and their meanings are:

    c      Prints a single character.
            Takes an int argument and converts it to a character.

    s      Prints a string of characters.
            Takes a char * argument pointing to a null-terminated string.
            If the string is NULL, prints "(null)".

    d, i   Prints a signed decimal integer.
            Takes an int argument and converts it to decimal notation.
            Both %d and %i work identically.

    %      Prints a literal '%' character.
            No argument is consumed. Use %% to print a single %.

RETURN VALUE
    Upon successful return, these functions return the number of bytes
    printed (excluding the null byte used to end output to strings).

EXAMPLES

    #include <stdio.h>
    #include "main.h"

int main(void)
{
    _printf("Hello\n");
    _printf("%d", 39);
    _printf("%s", "This is a string");
    _printf("%c", H);

    return (0);
}

version 1.0                                                     July 2025                                                           _prinft



===============================================================================



                    Manuel des Fonctions de Bibliothèque - _printf

NOM
       _printf - conversion de sortie formatée

BIBLIOTHÈQUE
       Bibliothèque C standard (libc, -lc)

SYNOPSIS
 #include <stdio.h>
    int _printf(const char *format, ...);

DESCRIPTION
    Les fonctions de la famille printf() produisent une sortie selon un
    format comme décrit ci-dessous.

    Format de la chaîne de format :
    La chaîne de format est une chaîne de caractères, commençant et se terminant dans
    son état de décalage initial, le cas échéant. La chaîne de format est une chaîne de caractères composée de zéro ou
    plusieurs directives : caractères ordinaires (pas %), qui sont
    copiés inchangés vers le flux de sortie ; et spécifications de
    conversion, chacune résultant en la récupération de zéro ou plusieurs
    arguments suivants. Chaque spécification de conversion est introduite
    par le caractère %, et se termine par un spécificateur de conversion.

SPÉCIFICATEURS DE CONVERSION
     Un caractère qui spécifie le type de conversion à appliquer.
       Les spécificateurs de conversion et leurs significations sont :

    c      Imprime un caractère unique.
            Prend un argument int et le convertit en caractère.

    s      Imprime une chaîne de caractères.
            Prend un argument char * pointant vers une chaîne terminée par '\0'.
            Si la chaîne est NULL, imprime "(null)".

    d, i   Imprime un entier décimal signé.
            Prend un argument int et le convertit en notation décimale.
            %d et %i fonctionnent de manière identique.

    %      Imprime un caractère '%' littéral.
            Aucun argument n'est consommé. Utilisez %% pour imprimer un seul %.

VALEUR DE RETOUR
    En cas de retour réussi, ces fonctions retournent le nombre d'octets
    imprimés (excluant l'octet nul utilisé pour terminer la sortie vers les chaînes).

EXEMPLES

    #include <stdio.h>
    #include "main.h"

int main(void)
{
    _printf("Bonjour\n");
    _printf("%d", 39);
    _printf("%s", "Ceci est une chaîne");
    _printf("%c", H);

    return (0);
}

version 1.0                                                     Juillet 2025                                                        _prinft
