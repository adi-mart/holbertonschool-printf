                    Library Functions Manual -  _printf

NAME
       _printf - formatted output conversion

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
 #include <stdio.h>
    int _printf(const char *format, ...);

DESCRIPTION
    The functions in the printf() family produce output according to a
    format as described below.

    Format of the format string :
    The format string is a character string, beginning and ending in
    its initial shift state, if any. The format string is a character string composed of zero or
    more directives: ordinary characters (not %), which are
    copied unchanged to the output stream; and conversion
    specifications, each of which results in fetching zero or more
    subsequent arguments.  Each conversion specification is introduced
    by the character %, and ends with a conversion specifier.

CONVERSION SPECIFIERS
     A character that specifies the type of conversion to be applied.
       The conversion specifiers and their meanings are:

    d, i   The int argument is converted to signed decimal notation.
            The precision, if any, gives the minimum number of digits
            that must appear; if the converted value requires fewer
            digits, it is padded on the left with zeros.  The default
            precision is 1.  When 0 is printed with an explicit
            precision 0, the output is empty.

    c      If no l modifier is present, the int argument is converted
            to an unsigned char, and the resulting character is
            written.

    s      If no l modifier is present: the const char * argument is
            expected to be a pointer to an array of character type
            (pointer to a string).  Characters from the array are
            written up to (but not including) a terminating null byte
            ('\0'); if a precision is specified, no more than the
            number specified are written.  If a precision is given, no
            null byte need be present; if the precision is not
            specified, or is greater than the size of the array, the
            array must contain a terminating null byte.

    %      A '%' is written.  No argument is converted.  The complete
            conversion specification is '%%'.

RETURN VALUE
    Upon successful return, these functions return the number of bytes
    printed (excluding the null byte used to end output to strings).

EXAMPLES

    #include <stdio.h>
    #include "main.h"

int main(void)
{
    _printf("Hello\n");
    _printf("%d", 39);
    _printf("%s", "This is a string");
    _printf("%c", H);

    return (0);
}

version 1.0                                                     July 2025                                                           _prinft
